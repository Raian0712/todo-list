import homeStyles from '../../styles/Home.module.css'
import tableStyles from '../../styles/Table.module.css'
import InputBox from "../../components/InputBox"
import Head from 'next/head'
import { Button } from 'antd'
import { useState, useEffect } from 'react'
import { useToasts } from 'react-toast-notifications'
import { format } from 'date-fns'
import { useRouter } from 'next/router'
import { gql, useMutation, useQuery } from '@apollo/client'
import { print } from 'graphql'
//data schema
// {
//   id: number;
//   text: string;
//   completed: boolean;
//   createdAt: Date
// }

const AddPage = () => {
  //store new todo list info here
  const [inputData, setInputData] = useState('')
  const [allToDos, setAllToDos] = useState([])
  const { addToast } = useToasts()
  const ADD_TODO = gql`
  mutation ($newID: ID!, $newText: String!, $newCompleted: Boolean!, $newCreatedAt: String!) {
    createTodo(
      todo: {
        id: $newID
        text: $newText
        completed: $newCompleted
        createdAt: $newCreatedAt
      }
    ) {
      id
      text
      completed
      createdAt
    }
  }
  `
  const GET_TODOS = gql`
  {
    todos {
      id,
      text,
      completed,
      createdAt
    }
  }
  `
  const [addToDo, { data, loading, error }] = useMutation(ADD_TODO)
  
  const router = useRouter()
  const {data: data1, loading: loading1, error: error1, refetch, networkStatus} = useQuery(GET_TODOS, {fetchPolicy: "no-cache"})

  //load todo list item from the data schema above from the localStorage and store it to allToDos
  useEffect(() => {
    async function getData() {
      const { data } = await refetch()
      
      setAllToDos(data.todos)
      console.log(data)
    }

    getData()
    // if (localStorage.getItem('todos')) {
    //   let allToDos = JSON.parse(localStorage.getItem('todos'))
    //   setAllToDos(allToDos)
    // }
  }, [router.pathname])

  async function addToDoList(text: string) {
    //create a new unique id
    let newID = generateNewId()

    //create a new JSON object
    let newToDo = {
      id: newID,
      text: text,
      completed: false,
      createdAt: format(new Date(), 'iii dd/MMM/yyyy HH:mm:ss'),
      __typeName: "TodosType"
    }
    //stores it into the array first before storing it into localStoage
    if (typeof window !== 'undefined') {
      console.log(print(ADD_TODO))
      addToDo({ variables: { newID: newID, newText: text, newCompleted: false, newCreatedAt: newToDo.createdAt } })
        .then(({ data }) => {
          addToast('Successfully added todo list item', {
            appearance: 'success',
            autoDismiss: true,
            autoDismissTimeout: 2000,
          })
        })
          .catch(e => {
            console.log(JSON.stringify(e, null, 2))
            addToast('There was an error trying to added the todo list item', {
              appearance: 'error',
              autoDismiss: true,
              autoDismissTimeout: 2000,
            })
        })
      console.log(newToDo)
      console.log(allToDos)
      setAllToDos([...allToDos, newToDo])
    }

    function generateNewId() {
      console.log(allToDos)
      let id: number = allToDos.length + 1
      let duplicateFound: boolean = false
      if (allToDos.length === 0) {
        id = 1
      } else {
        allToDos.forEach((item) => {
          //check for items with duplicate id and generate the new unique id from the biggest number of the allToDOs array plus one
          console.log(Number(item.id) + " " + id + " " + (Number(item.id) === id))
          if (Number(item.id) === id) {
            duplicateFound = true
          }
        })
      }

      if (duplicateFound) {
        console.log("Duplicate items found")
        //find the biggest id number of allToDos array and add one to it
        let biggestId: number = 0
        allToDos.forEach((item) => {
          if (Number(item.id) > biggestId) {
            biggestId = Number(item.id)
          }
        })
        id = biggestId + 1
      
      }

      return id
    }
  }
  
  if (loading) return 'Submitting...';
  if (error) return `Submission error! ${error.message}`;

  return (
    <>
      <Head>
        <title>To-Do Web App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={homeStyles.container}>
        <main className={homeStyles.main}>
        <Button type="primary" className={homeStyles.backButtonEdit} onClick={() => { router.back() }}>Back</Button>
          <h3>Enter new to-do list here</h3>
          <div className={tableStyles.content}>
            <InputBox onChange={(e) => { setInputData(e.target.value) } }/>
          </div>
          <div className={homeStyles.buttons}>
            <Button type="primary" onClick={() => { addToDoList(inputData); router.push('/todos') }}>Add</Button>
          </div>
        </main>
      </div>
    </>
    
  );
}

export default AddPage;